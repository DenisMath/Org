* 1
Если требуется подсчитать число строк в тексте, нужно распозна-
вать признаки конца строк  и  увеличивать  на  единицу  счетчик
строк.  lex использует стандартные для языка C управляющие пос-
ледовательности символов,  подобные  \n  для  символа  перевода
строки. Для подсчета числа строк можно использовать правило

        \n      lineno++;

где lineno, как и другие C-переменные, описывается в секции оп-
ределений

* 2

lex  сохраняет каждую сопоставленную цепочку в массиве символов
yytext[]. Вы можете распечатать содержимое  этого  массива  или
манипулировать  им, как угодно. Иногда Ваше действие может сос-
тоять из двух или большего числа C-операторов и Вы должны  (или
решили  из соображений стиля и ясности) написать их на несколь-
ких строках. Чтобы информировать lex о том, что действие  отно-
сится  к  одному  правилу,  надо просто заключить C-операторы в
скобки. Например, чтобы подсчитать  общее  число  всех  цепочек
цифр  во входном тексте, печатать текущее общее число таких це-
почек и выводить каждую из них, как только она обнаружена, мож-
но воспользоваться такой записью:

        \+?[0-9]+       { digstrgcount++;
                          printf("%d",digstrngcount);
                          yytext [yyleng] = (char) 0;
                          printf("%s",yytext); }

Эта  спецификация  сопоставляется с цепочками цифр, перед кото-
рыми, быть может, стоит знак плюс, поскольку операция ? обозна-
чает, что знак плюс спереди не обязателен.  Кроме  того,  будут
учитываться  и  отрицательные  цепочки цифр, так как последова-
тельность, которая следует за знаком минус, -, будет  сопостав-
ляться  с  приведенным  шаблоном. В следующем разделе показано,
как отличить отрицательные целые числа от положительных.

* 3
В  lex'е имеется ряд подпрограмм, которые предоставляют возмож-
ность многократной  обработки  цепочек  символов.  Это  функции
yymore()  и  yyless(n)  и действие REJECT. Повторим, что текст,
сопоставленный с некоторой спецификацией, помещается  в  массив
yytext[]. В общем случае, после того как выполнено действие для
данной спецификации, символы в yytext[] замещаются последующими
символами входного потока, образующими следующую сопоставляемую
цепочку. Функция yymore(), напротив, гарантирует, что последую-
щие распознаваемые символы будут добавляться после тех, которые
уже  содержатся в yytext[]. Тем самым в случае, когда значимыми
оказываются как одна цепочка  символов,  так  и  другая,  более
длинная,  включающая  первую,  появляется возможность выполнить
сначала одно действие, а потом другое, ассоциированное с  длин-
ной цепочкой.
